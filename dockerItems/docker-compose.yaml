version: "3.4"
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - ldt

  kafka:
    image: confluentinc/cp-server:7.2.1
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://178.170.196.177:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: kafka
    networks:
      - ldt

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8082:8080
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
    networks:
      - ldt

  events-subscriber:
    restart: always
    build:
      context: ../EventsSubscriber
      dockerfile: Dockerfile
    networks:
      - ldt

  analyzer:
    restart: always
    build:
      context: ../analyzer
      dockerfile: Dockerfile
    networks:
      - ldt

  front:
    restart: always
    build:
      context: ../dashboard
      dockerfile: Dockerfile
    ports:
      - 3000:3000

  nginx:
    image: nginx
    container_name: nginx
    ports:
      - 80:80
      - 443:443
    restart: always
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../certbot/conf:/etc/letsencrypt
      - ../certbot/www:/var/www/certbot

  events-db:
    image: postgres:14.1-alpine
    restart: always
    env_file:
      - events-db.env
    environment:
      PGDATA: "/var/lib/postgresql/data/pgdata"
    # volumes:
    #  - ../events-db/init:/docker-entrypoint-initdb.d
    #  - /events-db/data:/var/lib/postgresql/data
    ports:
      - 5433:5432
    networks:
      - ldt

  certbot:
    image: certbot/certbot:latest
    #docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ --dry-run -d domain_name -
    #docker-compose run --rm certbot certonly --webroot --webroot-path /var/www/certbot/ -d domain_name
    volumes:
      - "../certbot/conf:/etc/letsencrypt"
      - "../certbot/www:/var/www/certbot"

networks:
  ldt:
    driver: bridge
